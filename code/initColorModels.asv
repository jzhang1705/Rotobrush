% Each classifier inside the window Wtk consists of a local color
% model Mc, a color model confidence value fc, and a local shape
% model Ms.

function ColorModels = initializeColorModels(IMG, Mask, MaskOutline, LocalWindows, BoundaryWidth, WindowWidth)
% INITIALIZAECOLORMODELS Initialize color models.  ColorModels is a struct you should define yourself.
%
% Must define a field ColorModels.Confidences: a cell array of the color confidence map for each local window.
      
    % number of local windows
    numLocalWindows = size(LocalWindows, 1);
    
    % Declare ColorModel struct
    ColorModels = struct;
    ColorModels.Confidence = cell(numLocalWindows, 1);
    ColorModels.F = cell(numLocalWindows, 1); % foreground points
    ColorModels.B = cell(numLocalWindows, 1); % background  points
    ColorModels.F_GMM = cell(numLocalWindows, 1); % foreground GMM
    ColorModels.B_GMM = cell(numLocalWindows, 1); % background GMM
    ColorModels.distan = cell(numLocalWindows, 1);
    
    % Gets all the spacial distances
    d = bwdist(MaskOutline);
    
    % We build GMMs for the local foreground (F) and background (B) regions, in the Lab color space.
    IMG = rgb2lab(IMG);

    % The number of components in each
    % GMM is set to 3 as we expect simple color distributions in a small local region.
    k = 3;

    % σc is fixed as half of the window size in our system. 
    sigma_c = WindowWidth/2;

    % GMM model is a window-level local classifier.
    for i = 1:numLocalWindows
        % Get the corners of the window
        lowerX = round(LocalWindows(i,1) -  sigma_c);
        upperX = round(LocalWindows(i,1) +  sigma_c);
        lowerY = round(LocalWindows(i,2) -  sigma_c);
        upperY = round(LocalWindows(i,2) +  sigma_c); 
        
        % To avoid possible sampling errors, 
        % we only use pixels whose spatial distance to the segmented
        % boundary is larger than a threshold (5 pixels in our system) as the
        % training data for the GMMs.
        LboundX = lowerX + BoundaryWidth;
        UboundX = upperX - BoundaryWidth;
        LboundY = lowerY + BoundaryWidth;
        UboundY = upperY - BoundaryWidth;
        
        % Two GMM are built for F and B separately.
        F = []; % Foreground pixels;
        B = []; % Background pixels;
        
        % Note: Check if the Mask and MakOutline logic is correct
        % I am not sure if what I did here is 100% correct
        % Note that y is row and x is column (similar issue with project 2)
        for j = LboundX:UboundX
            for k = LboundY:UboundY
                if (Mask(k,j) == 1 && MaskOutline(k,j) == 0)
                    F = [F; IMG(k,j,1), IMG(k,j,2), IMG(k,j,3)]; 
                elseif (Mask(k,j) == 0 && MaskOutline(k,j) == 0)
                    B = [B; IMG(k,j,1), IMG(k,j,2), IMG(k,j,3)];
                end
            end
        end
        
        % Create gmm models 
        F_GMM = fitgmdist(F, k);
        B_GMM = fitgmdist(B, k);
        
        % For a pixel x in the window,its foreground probability generated 
        % from the color model is computed as
        % pc(x) = pc(x|F)/(pc(x|F) + pc(x|B))
        % where pc(x|F) and pc(x|B) are the corresponding probabilities
        % computed from the two GMMs.
        p_c = zeros(WindowWidth, WindowWidth);
        
        
        % y = pdf(pd,x) returns the pdf of the probability distribution object pd, 
        % evaluated at the values in x.
        
        c = 1; % column index
        for j = lowerX:upperX
            r = 1; %row index
            for k = lowerY:upperY
                pcxF = pdf(F_GMM, [IMG(k,j,1), IMG(k,j,2), IMG(k,j,3)]);
                pcxB = pdf(B_GMM, [IMG(k,j,1), IMG(k,j,2), IMG(k,j,3)]);
                p_c(r,c) = pcxF/(pcxF + pcxB); %(r,c) is x
                r = r + 1;
            end
            c = c + 1;
        end
        
        % The local color model confidence fc is used to describe how separable the 
        % local foreground is against the local background using just the color model.
        % Note: The equation for fc is mentioned in the the resouces of this project:
       
        % The weighting function ωc(x) is computed as ωc(x) = exp(−d^2(x)/σc^2), 
        % where d(x) is the spatial distance between x and
        % the foreground boundary, computed using a distance transform. σc
        % is fixed as half of the window size in our system.
        
        % Gets all the spacial distanes for points in a window
        d_x = d(lowerY:upperY, lowerX:upperX); 
        
        % Compute the weighting function ωc(x)
        w_cx = exp((-d_x.^2)/(sigma_c)^2);
        
        % Calculate the local color model confidence fc
        % |L^t(x) - p_c(x)|
        left = abs(MaskOutline(lowerY:upperY,lowerX:upperX) - p_c); 
        numerator = left.*w_cx;
        numerator = sum(numerator(:)); % Sum is the integral
        denominator = sum(w_cx(:));
        fc = 1 - numerator/denominator;
        
        % add elements to the ColorModel struct
        ColorModels.Confidences{i} = fc;
        ColorModels.F_GMM{i} = F_GMM;
        ColorModels.B_GMM{i} = B_GMM;
        
    end
end

