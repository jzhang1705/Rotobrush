function [mask, LocalWindows, ColorModels, ShapeConfidences] = ...
    updateModels(...
        NewLocalWindows, ...   % W^{t+1}_k
        LocalWindows, ...      % W^t_k
        CurrentFrame, ...      % I_{t+1} images{curr}
        warpedMask, ...        
        warpedMaskOutline, ... %  
        WindowWidth, ...       % Between 30 to 80
        ColorModels, ...      % Color model M_c
        ShapeConfidences, ... % Shape model M_s
        ProbMaskThreshold, ...
        fcutoff, ...
        SigmaMin, ...
        R, ...
        A ...
    )
% UPDATEMODELS: update shape and color models, and apply the result to generate a new mask.
% Feel free to redefine this as several different functions if you prefer.

    numLocalWindows = size(NewLocalWindows, 1);
    confidence = cell(numLocalWindows, 1);
    foreground = cell(numLocalWindows, 1);
    background = cell(numLocalWindows, 1);
    f_prob = cell(numLocalWindows, 1);
    b_prob = cell(numLocalWindows, 1);
    d = cell(numLocalWindows, 1);
    probs = cell(numLocalWindows, 1);
    w = cell(numLocalWindows, 1);
    
    IMG = rgb2lab(CurrentFrame); % recommended to use lab
         
    
    numLocalWindows = size(NewLocalWindows, 1);
    
    for i = 1:numLocalWindows
        
        % grab bounds
        lowerX = round(NewLocalWindows(i,1) - WindowWidth/2);
        upperX = round(NewLocalWindows(i,1) + WindowWidth/2);
        lowerY = round(NewLocalWindows(i,2) - WindowWidth/2);
        upperY = round(NewLocalWindows(i,2) + WindowWidth/2); 

        % grab all pixels in window
        window = IMG(lowerY:upperY, lowerX:upperX, :);
        l = window(:,:,1);
        a = window(:,:,2);
        b = window(:,:,3);
        window_vector = [];
        window_vector(:,1:3) = [l(:),a(:),b(:)];

        % prob map for Fore and Back
        curr_window_f_prob = pdf(ColorModels.F_GMM{i}, window_vector);
        curr_window_b_prob = pdf(ColorModels.B_GMM{i}, window_vector);

        % calculate prob map
        old_probs = curr_window_f_prob ./ (curr_window_f_prob + curr_window_b_prob);

        % points we will train new gmm models with
        f_indices = find(old_probs >= 0.75);
        b_indices = find(old_probs <= 0.25);

        % grab the values
        f_probs = window_vector(f_indices, :);
        b_probs = window_vector(b_indices, :);


        % join old F,B pixels with new F,B pixels
        all_f = [f_probs; ColorModels.F{i}];
        all_b = [b_probs; ColorModels.B{i}];

        % train new models
        if size(all_f, 1) < 3 || size(all_b, 1) < 3

            w{i} = NewLocalWindows(i,:);
            foreground{i} = all_f;
            background{i} = allB;

            f_prob{i} = ColorModels.F_GMM{i};
            b_prob{i} = ColorModels.B_GMM{i};  
            confidence{i} = ColorModels.Confidences{i};
            probs{i} = ColorModels.p_c{i}
            d{i} = ColorModels.d{i}

            continue

        try
            fGMM = fitgmdist(all_f, 1);
        catch
            fGMM = fitgmdist(all_f, 1, 'RegularizationValue',0.1);
        end

        try
            bGMM = fitgmdist(all_b, 1);
        catch
            bGMM = fitgmdist(all_b, 1, 'RegularizationValue',0.1);
        end

        % run new models on window
        new_window_f_prob = pdf(fGMM, window_vector);
        new_window_b_prob = pdf(bGMM, window_vector);

        % new probability map
        new_probs = new_window_f_prob ./ (new_window_f_prob + new_window_b_prob);

        % count new f,b pixels found by new gmm model
        new_f_count = find(new_probs == 1);
        new_b_count = find(new_probs ~= 1);

        % update the distance
        NewDistance = bwdist(warpedMaskOutline);
        NewDistance = NewDistance(lowerY:upperY, lowerX:upperX);
        NewDistance = -NewDistance.^2;

        
        % we update the model with new color model
        if(size(new_f_count,1) ~= 0 && size(new_f_count,1) < size(ColorModels.F{i}, 1))

            newfGMM = fGMM;
            newbGMM = bGMM;
            newFPoints = window_vector(new_f_count, :);
            newBPoints = window_vector(new_b_count, :);

            omega = exp(NewDistance / ((WindowWidth/2)^2));
            omega = omega(:);
            
            % grab the binary shape mask
            conf = warpedMaskOutline(lowerY:upperY,lowerX:upperX);
            conf = conf(:);

            conf = abs(conf - new_probs).*omega;
            conf = (1 - sum( conf(:))) / (sum(omega(:)));
            
            % reshape into probability window
            prob = reshape(new_probs, [size(window, 1) size(window, 2)]);


        else
            % retain our old GMM models
            newfGMM = ColorModels.F_GMM{i};
            newbGMM = ColorModels.B_GMM{i};  
            conf = ColorModels.Confidences{i};
            newFPoints = f_probs;
            newBPoints = b_probs;
            prob = reshape(old_probs, [size(window, 1) size(window, 1)]);
      
            
        end
        w{i} = NewLocalWindows(i,:);
        confidence{i} = conf;
        foreground{i} = newFPoints;
        background{i} = newBPoints;
        f_prob{i} = newfGMM;
        b_prob{i} = newbGMM;
        d{i} = NewDistance;
        probs{i} = prob;

    end

    %%%%%%%%%%%%% LOOK

    newColorModel = struct;
    newColorModel.Confidences = confidence;
    newColorModel.B_GMM = b_prob;
    newColorModel.F_GMM = f_prob;
    newColorModel.Windows = w;
    newColorModel.F = foreground;
    newColorModel.B = background;
    newColorModel.d = d;
    newColorModel.p_c = probs;


    %uses the new color models
    ShapeConfidences = initShapeConfidences(NewLocalWindows, newColorModel, WindowWidth, SigmaMin, A, R, fcutoff);
    

    %%%%%%%%%%
    LocalWarpedMasks = cell(numLocalWindows, 1);
    for i = 1:numLocalWindows
        lowerX = round(NewLocalWindows(i,1) - WindowWidth / 2);
        upperX = round(NewLocalWindows(i,1) + WindowWidth / 2);
        lowerY = round(NewLocalWindows(i,2) - WindowWidth / 2);
        upperY = round(NewLocalWindows(i,2) + WindowWidth / 2); 
        LocalWarpedMasks{i} = warpedMask( lowerY:upperY, lowerX:upperX);
    end
    
    %merge models
    pfs = cell(numLocalWindows, 1);
    for i = 1:numLocalWindows
        localMask = LocalWarpedMasks{i};
        shapeConf = ShapeConfidences.Confidences{i};
        
        pfs{i} = shapeConf.*localMask + (1 - shapeConf) .* newColorModel.p_c{i};
    end
    
    %merging
    maskNum = zeros(size(warpedMask));
    maskDenom = zeros(size(warpedMask));
    for i = 1:numLocalWindows
        pfsk = pfs{i};
        
        lowerX = round(NewLocalWindows(i,1) - WindowWidth / 2);
        upperX = round(NewLocalWindows(i,1) + WindowWidth / 2);
        lowerY = round(NewLocalWindows(i,2) - WindowWidth / 2);
        upperY = round(NewLocalWindows(i,2) + WindowWidth / 2); 
        
        for row = lowerY:upperY
            for col = lowerX:upperX
                
                denom = inv(pdist([NewLocalWindows(i,1), NewLocalWindows(i,2); col, row]) + 0.1);

                num = pfsk( col - lowerX + 1, row - lowerY + 1) * denom;
                maskNum(row, col) = maskNum(row,col) + num;
                maskDenom(row, col) = maskDenom(row,col) + denom;
                
            end
        end  
    end
    
    maskDenom(maskDenom == 0) = 1;
    Pfs = maskNum ./ maskDenom;
    
    UpdatedMask = zeros(size(Pfs));
    UpdatedMask(Pfs > ProbMaskThreshold) = 1;
    for i = 1:size(LocalWindows, 1)
        lowerY = round(LocalWindows(i,2) - WindowWidth / 2);
        upperY = round(LocalWindows(i,2) + WindowWidth / 2);
        lowerX = round(LocalWindows(i,1) - WindowWidth / 2);
        upperX = round(LocalWindows(i,1) + WindowWidth / 2); 
        window = UpdatedMask(lowerY:upperY, lowerX:upperX);
        window = imfill(window, 'holes');
        UpdatedMask(lowerY:upperY, lowerX:upperX) = window;
        
    end
    mask = imfill(UpdatedMask, 'holes');  
    LocalWindows = NewLocalWindows;
    ColorModels = newColorModel;
 

end

